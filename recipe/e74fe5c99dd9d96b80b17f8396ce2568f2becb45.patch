From e74fe5c99dd9d96b80b17f8396ce2568f2becb45 Mon Sep 17 00:00:00 2001
From: Marcus Holland-Moritz <github@mhxnet.de>
Date: Mon, 26 Jun 2023 13:01:08 -0700
Subject: [PATCH] Fix libfmt errors from not finding enum formatter (#2022)

Summary:
Recent versions of libfmt have become more strict and require `enum` types to be formattable:

    static assertion failed due to requirement 'formattable': Cannot format an argument. To make type T formattable provide a formatter<T> specialization: https://fmt.dev/latest/api.html#udt

This is a quick fix to simply use the underlying type.

Pull Request resolved: https://github.com/facebook/folly/pull/2022

Reviewed By: yfeldblum

Differential Revision:
D46973532
Ninja: Flaky land-time

Pulled By: ot

fbshipit-source-id: 49b64e3885703c2157e66979e0523b5245a9470a
---
 folly/futures/detail/Core.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/folly/futures/detail/Core.cpp b/folly/futures/detail/Core.cpp
index 858229100f9..74ed6d913f7 100644
--- a/folly/futures/detail/Core.cpp
+++ b/folly/futures/detail/Core.cpp
@@ -19,6 +19,7 @@
 #include <new>
 
 #include <fmt/core.h>
+#include <folly/Utility.h>
 #include <folly/lang/Assume.h>
 
 namespace folly {
@@ -30,7 +31,7 @@ namespace {
 template <class Enum>
 void terminate_unexpected_state(fmt::string_view context, Enum state) {
   terminate_with<std::logic_error>(
-      fmt::format("{} unexpected state: {}", context, state));
+      fmt::format("{} unexpected state: {}", context, to_underlying(state)));
 }
 
 } // namespace
